//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  customers         Customer[]         @relation("user")
  communicationLogs CommunicationLog[] @relation("user")
  jobNotes          JobNote[]          @relation("user")
  jobSchedules      JobSchedule[]      @relation("user")
}

/// @@allow('all', true)
model Customer {
  id        String   @id() @default(uuid())
  name      String?
  email     String?
  phone     String?
  address   String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  jobs      Job[]    @relation("customer")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Product {
  id          String   @id() @default(uuid())
  name        String?
  description String?
  price       Float?
  jobs        Job[]    @relation("product")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model JobStatus {
  id           String   @id() @default(uuid())
  name         String?
  description  String?
  jobsAsStatus Job[]    @relation("status")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Job {
  id                String             @id() @default(uuid())
  customerId        String?
  customer          Customer?          @relation(fields: [customerId], references: [id], name: "customer")
  productId         String?
  product           Product?           @relation(fields: [productId], references: [id], name: "product")
  statusId          String?
  status            JobStatus?         @relation(fields: [statusId], references: [id], name: "status")
  communicationLogs CommunicationLog[] @relation("job")
  installations     Installation[]     @relation("job")
  jobNotes          JobNote[]          @relation("job")
  jobSchedules      JobSchedule[]      @relation("job")
  jobSheets         JobSheet[]         @relation("job")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
}

/// @@allow('all', true)
model CommunicationLog {
  id        String   @id() @default(uuid())
  message   String?
  jobId     String?
  job       Job?     @relation(fields: [jobId], references: [id], name: "job")
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Installation {
  id               String   @id() @default(uuid())
  installationDate String?
  completed        Boolean?
  notes            String?
  jobId            String?
  job              Job?     @relation(fields: [jobId], references: [id], name: "job")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model JobNote {
  id        String   @id() @default(uuid())
  note      String?
  jobId     String?
  job       Job?     @relation(fields: [jobId], references: [id], name: "job")
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model JobSchedule {
  id            String   @id() @default(uuid())
  scheduledDate String?
  scheduledTime String?
  jobId         String?
  job           Job?     @relation(fields: [jobId], references: [id], name: "job")
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model JobSheet {
  id        String   @id() @default(uuid())
  sheetUrl  String?
  jobId     String?
  job       Job?     @relation(fields: [jobId], references: [id], name: "job")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}
